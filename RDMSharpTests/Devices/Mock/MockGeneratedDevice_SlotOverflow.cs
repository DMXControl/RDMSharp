using RDMSharp.Metadata;
using RDMSharp.RDM.Device.Module;

namespace RDMSharpTests.Devices.Mock
{
    internal class MockGeneratedDevice_SlotOverflow : AbstractMockGeneratedDevice
    {
        public override EManufacturer ManufacturerID
        {
            get
            {
                return (EManufacturer)UID.ManufacturerID;
            }
        }
        public override ushort DeviceModelID => 20;
        public override ERDM_ProductCategoryCoarse ProductCategoryCoarse => ERDM_ProductCategoryCoarse.CONTROL;
        public override ERDM_ProductCategoryFine ProductCategoryFine => ERDM_ProductCategoryFine.DATA_CONVERSION;
        public override bool SupportDMXAddress => true;

        private static byte[] SLOT_INFO_RAW = new byte[] {
                0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00,
                0x03, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x05,
                0x03, 0x00, 0x05, 0x00, 0x05, 0x02, 0x00, 0x06,
                0x00, 0x91, 0x00, 0x00, 0x07, 0x00, 0x91, 0x01,
                0x00, 0x08, 0x00, 0x05, 0x02, 0x00, 0x09, 0x00,
                0x02, 0x01, 0x00, 0x0a, 0x01, 0x00, 0x09, 0x00,
                0x0b, 0x00, 0x02, 0x01, 0x00, 0x0c, 0x01, 0x00,
                0x0b, 0x00, 0x0d, 0x00, 0x02, 0x02, 0x00, 0x0e,
                0x00, 0x02, 0x04, 0x00, 0x0f, 0x00, 0x02, 0x03,
                0x00, 0x10, 0x00, 0x02, 0x08, 0x00, 0x11, 0x00,
                0x02, 0x08, 0x00, 0x12, 0x00, 0x05, 0x04, 0x00,
                0x13, 0x00, 0x05, 0x03, 0x00, 0x14, 0x00, 0xff,
                0xff, 0x00, 0x15, 0x00, 0xff, 0xff, 0x00, 0x16,
                0x00, 0x03, 0x04, 0x00, 0x17, 0x06, 0x00, 0x16,
                0x00, 0x18, 0x04, 0x00, 0x17,
                0x00, 0x19, 0x00, 0x03, 0x02, 0x00, 0x1a, 0x07,
                0x00, 0x19, 0x00, 0x1b, 0x01, 0x00, 0x1a, 0x00,
                0x1c, 0x00, 0x03, 0x02, 0x00, 0x1d, 0x07, 0x00,
                0x1c, 0x00, 0x1e, 0x01, 0x00, 0x1d, 0x00, 0x1f,
                0x00, 0x03, 0x03, 0x00, 0x20, 0x06, 0x00, 0x1f,
                0x00, 0x21, 0x00, 0x03, 0x03, 0x00, 0x22, 0x06,
                0x00, 0x21, 0x00, 0x23, 0x00, 0x04, 0x03, 0x00,
                0x24, 0x00, 0x04, 0x01, 0x00, 0x25, 0x01, 0x00,
                0x24, 0x00, 0x26, 0x00, 0x04, 0x05, 0x00, 0x27,
                0x01, 0x00, 0x26, 0x00, 0x28, 0x00, 0x04, 0x02,
                0x00, 0x29, 0x01, 0x00, 0x28, 0x00, 0x2a, 0x00,
                0x04, 0x06, 0x00, 0x2b, 0x00, 0x04, 0x06, 0x00,
                0x2c, 0x06, 0x00, 0x2b, 0x00, 0x2d, 0x00, 0x04,
                0x06, 0x00, 0x2e, 0x06, 0x00, 0x2d, 0x00, 0x2f,
                0x00, 0x04, 0x06, 0x00, 0x30, 0x06, 0x00, 0x2f,
                0x00, 0x31, 0x00, 0x04, 0x06, 0x00, 0x32, 0x06,
                0x00, 0x31, 0x00, 0x33, 0x00, 0x04, 0x04, 0x00,
                0x34, 0x00, 0x00, 0x02, 0x00, 0x35, 0x01, 0x00,
                0x34
            };

        private static readonly GeneratedPersonality[] PERSONALITYS = new GeneratedPersonality[] { PersonalityFromRawData(SLOT_INFO_RAW) };

        private static Sensor[] GetSensors() {
            return new Sensor[] {};
        }

        private static GeneratedPersonality PersonalityFromRawData(byte[] bytes)
        {
            List<Slot> slots = new List<Slot>();
            var bag = new ParameterBag(ERDM_Parameter.SLOT_INFO);            
            RDMSlotInfo[] slotInfos = (RDMSlotInfo[])MetadataFactory.ParseDataToPayload(MetadataFactory.GetDefine(bag), RDMSharp.Metadata.JSON.Command.ECommandDublicate.GetResponse, bytes).ParsedObject;
            foreach (RDMSlotInfo slotInfo in slotInfos)
            {
                Slot slot = new Slot(slotInfo.SlotOffset, slotInfo.SlotLabelId, "Dummy Slot", 1);
                slots.Add(slot);
            }
            return new GeneratedPersonality(1, "Generated", slots.ToArray());
        }

        public override bool SupportQueued => true;

        public override bool SupportStatus => true;
        
        public MockGeneratedDevice_SlotOverflow(UID uid) : base(uid, SubDevice.Root, new ERDM_Parameter[] { }, GetSensors(), GetModules())
        {
        }
        private static IReadOnlyCollection<IModule> GetModules()
        {
            return new IModule[] {
                new DeviceLabelModule("Dummy Device 1"),
                new ManufacturerLabelModule("Dummy Manufacturer 9FFF"),
                new DeviceModelDescriptionModule("Test Model Description"),
                new SoftwareVersionModule(0x1234, $"Dummy Software"),
                new BootSoftwareVersionModule(123, $"Dummy Bootloader Software"),
                new DMX_StartAddressModule(1),
                new DMX_PersonalityModule(1,PERSONALITYS) };
        }
        protected sealed override void OnDispose()
        {
        }
    }
}